globals [counter view-mode min-poor-util max-poor-util min-rich-util max-rich-util ]

breed [ rich a-rich ]
breed [ poor a-poor ]
breed [ jobs job ] ;; jobs are places of employment held by many people

rich-own [utilityr]
poor-own [utilityp]
jobs-own [utility]
patches-own [quality price sddist]


;; ------------------------
;; SETUP Procedures
;; ------------------------

to setup
  ca
  set view-mode "quality"

  setup-rich
  setup-poor
  setup-jobs
  setup-patches
  
  ask patches [ update-patch-color ]
  reset-ticks
end

;; ------------------------
;; Setup sub-processes

to setup-rich
  create-rich 5
  ask rich
  [
    set color 126
    set shape "box"
    let radius 10
    setxy ( ( radius / 2 ) - random-float ( radius * 1.0 ) ) ( ( radius / 2 ) - random-float ( radius * 1.0 ) )
    raise-price
    raise-value
  ]
end

to setup-poor
  create-poor 5
  ask poor
  [
    set color 105
    set shape "box"
    let radius 10
    setxy ( ( radius / 2 ) - random-float ( radius * 1.0 ) ) ( ( radius / 2 ) - random-float ( radius * 1.0 ) )
    decrease-price
    decrease-value
  ]

end

to setup-jobs
  create-jobs 1
  ask jobs
  [
    set color red
    set shape "circle"
    set size 2
  ]
end

to setup-patches
  ask patches [
    set quality 40
    set price 40
  ]
  ask patches
  [
    set sddist min [distance myself] of jobs
  ]
end

;; ------------------------
;; Increase/decrease sub-processes

to raise-value
  ask patch-here [ set quality ( quality * 1.05 ) ]
  ask patches in-radius 1 [ set quality ( quality * 1.04 ) ]
  ask patches in-radius 2 [ set quality ( quality * 1.03 ) ]
  ask patches in-radius 3 [ set quality ( quality * 1.02 ) ]
  ask patches in-radius 4 [ set quality ( quality * 1.01 )
    if quality > 100 [ set quality 100 ]
  ]
end

to decrease-value
  ask patch-here [ set quality ( quality * 0.95 ) ]
  ask patches in-radius 1 [ set quality ( quality * 0.96 ) ]
  ask patches in-radius 2 [ set quality ( quality * 0.97 ) ]
  ask patches in-radius 3 [ set quality ( quality * 0.98 ) ]
  ask patches in-radius 4 [ set quality ( quality * 0.99 )
    if (quality < 1) [ set quality 1]
  ]
end

to raise-price
  ask patch-here [ set price ( price * 1.05 ) ]
  ask patches in-radius 1 [ set price ( price * 1.04 ) ]
  ask patches in-radius 2 [ set price ( price * 1.03 ) ]
  ask patches in-radius 3 [ set price ( price * 1.02 ) ]
  ask patches in-radius 4 [ set price ( price * 1.01 )
   if price > 100 [ set price 100 ] ]
end

to decrease-price
  ask patch-here [ set price ( price * 0.95 ) ]
  ask patches in-radius 1 [ set price ( price * 0.96 ) ]
  ask patches in-radius 2 [ set price ( price * 0.97 ) ]
  ask patches in-radius 3 [ set price ( price * 0.98 ) ]
  ask patches in-radius 4 [ set price ( price * 0.99 )
    if (price < 1) [ set price 1]
  ]
end

;; ------------------------
;; Runtime Procedures
;; ------------------------

to go
  locate-poor
  locate-rich
  if counter > residents-per-job
  [
    locate-service
    set counter 0
  ]
  if count (rich) >= 20 [kill-rich]
  if count (poor) >= 20 [kill-poor]
  if count (jobs) >= max-jobs [kill-service]
  update-view
  do-plots
  tick
end

;; ------------------------
;; Runtime sub-processes

to locate-poor
  set counter ( counter + poor-per-step )
  create-poor poor-per-step
  [
    set color 105
    set shape "box"
    evaluate-poor
    decrease-value
    decrease-price
  ]
end

to locate-rich
  set counter ( counter + rich-per-step )
  create-rich rich-per-step
  [
    set color 126
    set shape "box"
    evaluate-rich
    raise-price
    raise-value
  ]
end

to evaluate-poor
  let candidate-patches n-of number-of-tests patches
  set candidate-patches candidate-patches with [ not any? turtles-here ]
  if (not any? candidate-patches)
    [ stop ]

  ;; we use a hedonistic utility function for our agents, shown below
  ;; basically, poor people are looking for inexpensive real estate, close to jobs
  let best-candidate max-one-of candidate-patches
    [ patch-utility-for-poor ]
  move-to best-candidate
  set utilityp [ patch-utility-for-poor ] of best-candidate
end

to-report patch-utility-for-poor
    report ( ( 1 / (sddist / 100 + 0.1) ) ^ ( 1 - poor-price-priority ) ) * ( ( 1 / price ) ^ ( 1 + poor-price-priority ) )
end

to evaluate-rich
  let candidate-patches n-of number-of-tests patches
  set candidate-patches candidate-patches with x
  if (not any? candidate-patches)
    [ stop ]

  ;; we use a hedonistic utility function for our agents, shown below
  ;; basically, rich people are looking for good quality real estate, close to jobs
  let best-candidate max-one-of candidate-patches
        [ patch-utility-for-rich ]
  move-to best-candidate
  set utilityr [ patch-utility-for-rich ] of best-candidate
end

to-report patch-utility-for-rich
  report ( ( 1 / (sddist + 0.1) ) ^ ( 1 - rich-quality-priority ) ) * ( quality ^ ( 1 + rich-quality-priority) )
end

to kill-poor
  repeat ( death-rate )
  [
    ;always kill the person that's been around the longest
    ask min-one-of poor [who]
      [ die ]
  ]
end

to kill-rich
  repeat ( death-rate)
  [
    ;always kill the person that's been around the longest
    ask min-one-of rich [who]
      [ die ]
  ]
end

to kill-service
  ; always kill the oldest job
  ask min-one-of jobs [who]
    [ die ]
  ask patches
    [ set sddist min [distance myself + .01] of jobs ]
end

to locate-service
  let empty-patches patches with [ not any? turtles-here ]

  if any? empty-patches
  [
    ask one-of empty-patches
    [
      sprout-jobs 1
      [
        set color red
        set shape "circle"
        set size 2
        evaluate-job
      ]
    ]
    ask patches
      [ set sddist min [distance myself + .01] of jobs ]
  ]
end

to evaluate-job
  let candidate-patches n-of number-of-tests patches
  set candidate-patches candidate-patches with [ not any? turtles-here ]
  if (not any? candidate-patches)
    [ stop ]

  ;; In this model, we assume that jobs move toward where the money is.
  ;; The validity of this assumption in a real-world setting is worthy of skepticism.
  ;;
  ;; However, it may not be entirely unreasonable. For instance, places with higher real
  ;; estate values are more likely to have affluent people nearby that will spend money
  ;; at retail commercial shops.
  ;;
  ;; On the other hand, companies would like to pay less rent, and so they may prefer to buy
  ;; land at low real-estate values
  ;; (particularly true for industrial sectors, which have no need for consumers neraby)
  let best-candidate max-one-of candidate-patches [ price ]
  move-to best-candidate
  set utility [ price ] of best-candidate
end

;; ------------------------
;; Visualization Procedures
;; ------------------------

to update-view
  if (view-mode = "poor-utility" or view-mode = "rich-utility")
  [
    let poor-util-list [ patch-utility-for-poor ] of patches
    set min-poor-util min poor-util-list
    set max-poor-util max poor-util-list

    let rich-util-list [ patch-utility-for-rich ] of patches
    set min-rich-util min rich-util-list
    set max-rich-util max rich-util-list
  ]

  ask patches [ update-patch-color ]
end


;; the particular constants we use to scale the colors in the display
;; are mainly chosen for visual appeal

to update-patch-color
  
  ifelse view-mode = "quality"
  [
    set pcolor scale-color green quality 1 100
  ][
  ifelse view-mode = "price"
  [
    set pcolor scale-color yellow price 0 100
  ][
  ifelse view-mode = "dist"
  [
    set pcolor scale-color blue sddist  ( 0.45 * ( max-pxcor * 1.414 ) ) ( 0.05 * ( max-pxcor * 1.414 ) )
  ][
  ifelse view-mode = "poor-utility"
  [
    ; use a logarithm for coloring, so we see better gradation
    set pcolor scale-color sky ln patch-utility-for-poor ln min-poor-util ln max-poor-util
  ][
  if view-mode = "rich-utility"
  [
    ; use a logarithm for coloring, so we see better gradation
    set pcolor scale-color pink ln patch-utility-for-rich ln min-rich-util ln max-rich-util
  ]]]]]
end



;; ------------------------
;; Plotting Procedure
;; ------------------------

to do-plots
  let rtotal 0
  let ptotal 0
  let step 0
  let rtime 0
  let ptime 0

  set-current-plot "Travel Distance"
  set rtotal 0
  set rtime 0
  set ptotal 0
  set ptime 0
  set-current-plot-pen "rich"
  plot median [ min [distance myself] of jobs ] of rich

  set-current-plot-pen "poor"
  plot median [ min [distance myself] of jobs ] of poor
end


; Copyright 2007 Uri Wilensky.
; See Info tab for full copyright and license.